- hosts: all
  remote_user: ec2-user
  become: yes
  tasks:
  - name: Perform dnf update
    dnf:
       name: "*"
       state: latest
  - name: Install telnet
    dnf:
      name: telnet
      state: installed
  - name: Install nginx
    dnf:
       name: nginx
       state: installed
  - name: Delete existing nginx.conf
    file:
       path: /etc/nginx/nginx.conf
       state: absent
  - name: Copy new nginx.conf
    copy:
       src: /opt/ansible/nginx.conf
       dest: /etc/nginx/nginx.conf
  - name: Start Nginx
    service:
       name: nginx
       state: started
  - name: Enable nginx service
    systemd:
       name: nginx
       enabled: yes
       state: started
  - name: Install Docker
    dnf:
       name:
         - docker
       state: installed
  - name: Start Docker
    service:
       name: docker
       state: started
  - name: Enable Docker service
    systemd:
       name: docker
       enabled: yes
  - name: Create /etc/docker directory
    file:
       path: /etc/docker
       state: directory
  - name: Disable all swap space
    command: swapoff -a
  - name: Load br_netfilter kernel module
    command: modprobe br_netfilter
  - name: Add br_netfilter to modules-load.d
    copy:
       dest: /etc/modules-load.d/k8s.conf
       content: "br_netfilter\n"
  - name: Add k8s.conf to sysctl.d
    copy:
       dest: /etc/sysctl.d/k8s.conf
       content: |
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1a
  - name: Reload sysctl configuration
    command: sysctl --system
  - name: Copy Docker daemon.json file
    copy:
       content: |
         {
           "exec-opts": ["native.cgroupdriver=systemd"],
           "log-driver": "json-file",
           "log-opts": {
             "max-size": "100m"
           },
           "storage-driver": "overlay2"
         }
       dest: /etc/docker/daemon.jsona
  - name: Reload systemd configuration, restart Docker, enable at boot, and check status
    systemd:
       name: docker
       state: restarted
       enabled: yes
       daemon_reload: yes
  - name: Create Kubernetes repository configuration file
    copy:
       dest: /etc/yum.repos.d/kubernetes.repo
       content: |
         [kubernetes]
         name=Kubernetes
         baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
         enabled=1
         gpgcheck=1
         repo_gpgcheck=1
         gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
  - name: Install Kubernetes components
    dnf:
       name:
         - kubelet
         - kubeadm
         - kubectl  
       state: present
  - name: Enable and start kubelet service
    systemd:
       name: kubelet
       enabled: yes
       state: started
  - name: Disable SELinux enforcement
    shell: setenforce 0
  - name: Modify /etc/selinux/config file
    lineinfile:
       path: /etc/selinux/config
       regexp: '^SELINUX=enforcing$'
       line: 'SELINUX=permissive'
       backup: yes
  - name: Retrieve IP address with hostname command and awk
    shell: hostname -I | awk '{print $1}'
    register: ip_address
  - name: Run kubectl init
    command: kubeadm init --ignore-preflight-errors=NumCPU,Mem --pod-network-cidr=10.10.0.0/16 --apiserver-advertise-address={{ ip_address.stdout }}
    register: kubeadm_output
  - name: Print kubeadm init output to console
    debug:
       var: kubeadm_output.stdout_lines
  - name: Create .kube directory
    file:
       path: "/root/.kube"
       state: directory
  - name: Copy Kubernetes admin.conf file to $HOME/.kube/config
    copy:
       src: /etc/kubernetes/admin.conf
       dest: "/root/.kube/config"
       remote_src: yes
       mode: '0644'
  - name: Export KUBECONFIG environment variable
    lineinfile:
       path: "root/.bashrc"
       line: "export KUBECONFIG=/etc/kubernetes/admin.conf"
       state: present
       create: yes
  - name: Restart kubelet service
    systemd:
       name: kubelet
       state: restarted
  - name: Install Weave Networks
    command: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"






















